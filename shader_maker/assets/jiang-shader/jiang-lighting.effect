// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        lightWidth: { value: 0.1, target: lw }
        lightOffset: { value: 0, target: lo }
        passedSeconds: {valune: 0, target: ps}
}%

CCProgram shared-ubos %{
  uniform Constants {
    float lw;
    float lo;
    float ps;
  };
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    uv0 = a_texCoord;
    color = a_color;
    return pos; 
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <shared-ubos>
 
  in vec4 color;  
  in vec2 uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    o *= color; 

    float cycle = ps - floor(ps);
    cycle *= 2.0;

    float sum = uv0.x + uv0.y;
    float border = cycle + lo;
    if (border - lw < sum && sum < border + lw) {
      float distance = abs(sum - border);
      float rate = distance / lw;
      vec3 white = vec3(1, 1, 1);
      return vec4(o.rgb * rate + white * (1.0 - rate), o.w);
    };

    return o;
  }
}%
