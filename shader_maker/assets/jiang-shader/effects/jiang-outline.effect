// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: outline-vs:vert
      frag: outline-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
}%

CCProgram outline-vs %{
  precision highp float;
  #include <cc-global>
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    uv0 = a_texCoord;
    color = a_color;
    return pos;
  }
}%

CCProgram outline-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>

  in vec4 color;
  in vec2 uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;

  bool checkIsMakeOutline (vec2 pos) {
    float scale = 10.0;
    float horWeight = cc_screenSize.zw.x * scale;
    float verWeight = cc_screenSize.zw.x * scale;
    float alpha = 0.1;
    vec4 centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos);
    if (centerColor.a <= alpha) {
      return false;
    };

    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(-horWeight, -verWeight));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(-horWeight, 0));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(-horWeight, verWeight));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(0, -verWeight));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(0, +verWeight));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(+horWeight, -verWeight));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(+horWeight, 0));
    if (centerColor.a <= alpha) {
      return true;
    };
    centerColor = CCSampleWithAlphaSeparated(cc_spriteTexture, pos + vec2(+horWeight, verWeight));
    if (centerColor.a <= alpha) {
      return true;
    };

    if (pos.x <= horWeight || 1.0 - verWeight <= pos.x) {
      return true;
    };
    if (pos.y <= horWeight || 1.0 - verWeight <= pos.y) { 
      return true;
    };

    return false;
  }

  vec4 frag () {
    if (checkIsMakeOutline(uv0)) {
      return vec4(1, 0, 0, 1);
    };

    vec4 o = vec4(1, 1, 1, 1);
    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    o *= color;
    return o;
  }
}%
